Mocha & Chai testing framework
-----------------------------------------------------------------------------
Introduction to Mocha

Mocha is a JS test framework that runs with Node.JS.
It is used to write simple test cases for JavaScript.

-----------------------------------------------------------------------------
Installing Mocha

You can install it globally or straight into the directory where you want to test. 
Wee are going for the second option. 

We installed Mocha under the Section_9_mocha_and_chai_unit_test_framework folder. 
The command: 
    npm init
    npm install mocha

Now, in the folder where you installed mocha, give the following command:
    npm test
You will get an error saying: "Error: no test specified"
The cause of this error can be found in your package.json file, where you can fiund this:
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
Change it to this:
  "scripts": {
    "test": "mocha"
  },

Do npm test again. You will stioll get an error, but you see that Mocha ran and it is basically saying that there were no test files. 
So we have verified Mocha is up and running. 
-----------------------------------------------------------------------------
Writing a test in Mocha

Create a new folder inside the current one, call it test. 
In it, create a test.js file, check code in the file itself.

We are going to use the builty-in node.js assertions.
Assertions are verifications. It is the exact thing you want to verify. 

After that we will write down a describe block, which is a callback function.
The describe is a test suite. You are going to have one describe that explains what your test is about.
Within the describe block we need an it. it() is going to be the actual test.
it() needs a name as well and convention is to write it wwith the word 'should'. 
The second argument it() takes is also acallback function. 
Inside the body of this is going to be our actual test. 
Our code now:

const assert = require("assert");

describe("Math suite", function () {
  //reusable functions
  function add(a, b) {
    return a + b;
  }

  //tests
  it("should add 2 numbers correctly", function () {
    const result = 2;

    assert.equal(add(1, 1), result);
  });
});

So in the it() block we define our expected result in a variable, and we do an assert statement. The actual tests. assert.equal() checks if 2 values are equal and takes 2 arguments. The first one is your actual acquired result. 
The second one is your expected result. 

To run the test: npm test (while in the folder where you have installed mocha.)
It searches for anything that is a Mocha test.
It will search for our test suite (math suite) and run our test. 
Notice it prints out the name of our it() test: should add 2 numbers correctly. 

Test casers are grouped within their test suite (the describe block).
You can add a third argument to the assert.equal statement: a message bthat gets printed when the test fails. 

-----------------------------------------------------------------------------
Before and after

In Mocha you have something called hooks. 
Hooks can be run before all tests, after all tests. or before/after each test. 

So you need the before() keywrod with in it a callback function. 
In this callback function, a block that will run before all tests. 

A before will execute once before all tests. 
A beforeEach wwill execute before each test. 
An after will execute once after all tests. 
An afterEach will execute after each test.

These can come in handy when you have different tests that need for example the same starting conditions. 
Like every test should start while being logged in on a page. 
An appropriate after could again be to log out.
-----------------------------------------------------------------------------
Including and excluding tests

Lets say you have a describe(), so a test suite, with a lot of tests but you only want to run one of them?
Instead of it() you can do it.only() and save. 
This will only run the test that has this notation. 
You can do this on multiple tests or on the suite itself: describe.only. 
This can come in handy if you have multiple test files. 

Now, what if you wanted to do all the tests except one?
For that you can use:   it.skip()
Skipped tests are marked as pending. It has not been run. 

Another trick, you can also do this:
                        it('pending test')
Notice the absence of the callback function. 
This is usefull for when we want to do a mock up of something we are testing and do not yet know what exactly. 
This empty test will show up as one that is pending. 

-----------------------------------------------------------------------------
Reporters

So far we have used the default reporter which is called SpecReporter. 
The format you see in the terminal is what is called the SpecReporter.

There are other built-in reporters. 
For example:
            npm test -- --reporter dot
This will give you a dot reporter: dots for the passed tests, commas for the pending ones. 

You also have nyan or landing like:
            npm test -- --reporter landing

Usually we stick with the normal one. 

-----------------------------------------------------------------------------
Introduction to Chai

Often times with Mocha you are going to see the word Chai. 
Chai is an assertion library. 
Assertions are ways to verify that the expected outcome is what actually happened.

Chai gives you more flexibility on how you can write your assertions. 
Here we will learn how to use chai with different types of assertions within the Mocha framework. 


-----------------------------------------------------------------------------
Installing chai

To install Mocha and chai together, go to a new folder and do:
    npm init
    npm install mocha 
    npm install chai
    In package.json: change test to Mocha

-----------------------------------------------------------------------------
Assertion options

With Chai you get 3 different ways to do assertions (split up into 2 different styles):
Styles:
    BDD - Behaviour Driven Development
    TDD - Test Driven Development

The three different ways:
    Should: BDD
    Expect: BDD
    Assert: TDD. 

The way you write assertions is a little bit different for each one. 
Make sure which type of assertions you are doing. 

-----------------------------------------------------------------------------
Expect assertions

When using chai, make sure you have a chai variable at the top of your file like this:
const chai = require("chai")
const expect = chai.expect
This makes expect available. 

How an expect statement looks:
  it("should pass expect", function () {
    expect(fname).to.be.equal("Wilco");
  });

First you fill in your actual and then your expected result. 
"i expect test subject x to be equal to reference value y"
You can put in an additional argument which will be displayed if the test fails:
  
  it("should pass expect", function () {
    expect(fname).to.be.equal("Wilco", 'Values are not equal');
  });

Another test:
  it.only("Should pass expect with boolean", function () {
    expect(bool).to.be.true;
  });
Here we were testing a Booleann value. 

Another test with a predefined array:
  const arr = [1, 2, 3, 4, ""];

    it.only("should pass expect with arr", function () {
    for (let i = 0; i < arr.length; i++) {
      expect(arr[i]).to.be.equal(3); // we want everything to be 3 but only one thing is going to be 3.
    }
  });

Above test will fail. And whenever the loop encounters the failure, the test will stop. 
We are looping through an array with multiple elements, however it is still only one test. 
one it block equals one test, and it does not matter how many assertions you put in there. 

As soon as one assertion fails, it will stop testing. It does not care about any other assertions. 


-----------------------------------------------------------------------------
Should assertions

Making should available:
const should = chai.should();

Use parnetheses here.

We will cover all styles, but choose one and stickt with it.
No need to make things complicated with different styles. 

The should syntax:
  it.only("Should pass should", function () {
    fname.should.equal("Wilco", "If test fails error message here");
  });

fname is the thing we are testing. "Wilco" in the equal parentheses is our reference. 

We like the expect version.

-----------------------------------------------------------------------------
Assert assertions

Making it available:
const chaiAssert = chai.assert;
No parentheses. 

It works basically the same as the mocha assert:

  it.only("Should pass Chai assert with fname", function () {
    chaiAssert.equal(fname, "Wilco", "Error message if test fails");
  });

Of the 3 we will use Expect the most. 
